pragma cashscript ^0.8.0;

// Hash Time Locked Contract
contract HTLC(bytes20 senderPKH,
              bytes20 recipientPKH,
              bytes32 secretLock,
              int expiration,
              int penaltyBPS) {

    // receive by recipient
    function receive(sig recipientSig, pubkey recipientPK, bytes32 secret) {
        if (recipientSig.length > 0) {
            require(hash160(recipientPK) == recipientPKH);
            require(checkSig(recipientSig, recipientPK));
        } else {
            bytes recipientLock = new LockingBytecodeP2PKH(recipientPKH);
            require(tx.inputs[1].lockingBytecode == recipientLock);
        }

        require(this.activeInputIndex == 0);
        require(sha256(secret) == secretLock);
        // require(tx.age >= expiration);
    }

    // refund by sender
    function refund(sig senderSig, pubkey senderPK) {
        if (senderSig.length > 0) {
            require(hash160(senderPK) == senderPKH);
            require(checkSig(senderSig, senderPK));
        } else {
            bytes senderLock = new LockingBytecodeP2PKH(senderPKH);
            require(tx.inputs[1].lockingBytecode == senderLock);
        }

        require(this.activeInputIndex == 0);
        require(tx.age >= expiration);

        // give some of the fund to the recipient
        if (penaltyBPS > 0) {
            int penalty = tx.inputs[0].value * penaltyBPS / 10000;
            require(tx.outputs[0].value >= penalty);
            bytes recipientLock = new LockingBytecodeP2PKH(recipientPKH);
            require(tx.outputs[0].lockingBytecode == recipientLock);
        }
    }

}
