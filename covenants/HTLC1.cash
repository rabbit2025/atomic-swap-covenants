pragma cashscript ^0.8.0;

// Hash Time Locked Contract
contract HTLC(bytes20 senderPKH,
              bytes20 recipientPKH,
              bytes32 secretLock,
              int expiration,
              int penaltyBPS) {

    // receive by recipient
    function receive(sig recipientSig, pubkey recipientPK, bytes32 secret) {
        require(hash160(recipientPK) == recipientPKH);
        require(checkSig(recipientSig, recipientPK));
        require(sha256(secret) == secretLock);
        // require(tx.age >= expiration);
    }

    // refund by sender
    function refund(sig senderSig, pubkey senderPK) {
        require(hash160(senderPK) == senderPKH);
        require(checkSig(senderSig, senderPK));
        require(tx.age >= expiration);

        // give some of the fund to the recipient
        if (penaltyBPS > 0) {
            int penalty = tx.inputs[0].value * penaltyBPS / 10000;
            require(tx.inputs.length == 1);
            require(tx.outputs[0].value >= penalty);
            require(tx.outputs[0].lockingBytecode
                == new LockingBytecodeP2PKH(recipientPKH));
        }
    }

}
